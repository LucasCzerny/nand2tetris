// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=intoA);
	
	// A register
	Not(in=instruction[15], out=notInstr15);
	// a ... if A instruction; b ... if D instruction and d1 = 1
	Or(a=notInstr15, b=instruction[5], out=loadA);
	ARegister(in=intoA, load=loadA, out=outA, out[0..14]=addressM);
	
	Mux16(a=outA, b=inM, sel=instruction[12], out=inALU1);
	
	ALU(
		x=inALU2, y=inALU1,
		zx=instruction[11], nx=instruction[10],
		zy=instruction[9],  ny=instruction[8],
		f=instruction[7],   no=instruction[6],
		out=outALU, out=outM, zr=zeroALU, ng=lessALU
	);
	
	// D register
	// load = d2
	And(a=instruction[15], b=instruction[4], out=loadD);
	DRegister(in=outALU, load=loadD, out=inALU2);
	
	// Program Counter
	// greater than
	Not(in=lessALU, out=greaterALUtemp);
	Not(in=zeroALU, out=notZeroALU);
	And(a=notZeroALU, b=greaterALUtemp, out=greaterALU);
	// j1 -> less
	And(a=instruction[2], b=lessALU, out=jumpLess);
	// j2 -> equal
	And(a=instruction[1], b=zeroALU, out=jumpEqual);
	// j3 -> greater
	And(a=instruction[0], b=greaterALU, out=jumpGreater);
	// if any of the above == 1
	Or(a=jumpLess, b=jumpEqual, out=temp);
	Or(a=temp, b=jumpGreater, out=jumpTemp);
	And(a=jumpTemp, b=instruction[15], out=jump);
	PC(in=outA, load=jump, inc=true, reset=reset, out[0..14]=pc);
	
	// writeM
	And(a=instruction[3], b=instruction[15], out=writeM);
}